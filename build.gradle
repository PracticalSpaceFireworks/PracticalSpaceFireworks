plugins {
    id 'net.minecraftforge.gradle.forge' version '2.3.4'
    id 'io.franzbecker.gradle-lombok' version '5.0.0'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'net.nemerosa.versioning' version '2.15.1'
}

ext.buildnumber = 0
project.buildnumber = System.getenv('BUILD_NUMBER') ?: versioning.info.build

ext.mod_file = ""
project.mod_file = modFile

if (mod_file.empty) {
    throw new ProjectConfigurationException("Could not locate main mod file!", null)
}

def modVersion = getModField("VERSION", mod_file)

if (modVersion.empty) {
    throw new ProjectConfigurationException("Could not locate mod version in " + mod_file, null)
}

group = "net.gegy1000"
version = "$modVersion.$buildnumber"

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

lombok {
    version = '1.18.22'
    sha256 = '39f3922deb679b1852af519eb227157ef2dd0a21eec3542c8ce1b45f2df39742'
}

minecraft {
    version = '1.12.2-14.23.5.2847'
    mappings = 'stable_39'
    runDir = 'minecraft'
}

repositories {
    maven {
        url = 'https://maven.tterrag.com'
    }
    maven {
        url = 'https://cursemaven.com'
    }
    maven {
        url = 'https://dvs1.progwml6.com/files/maven'
    }
}

dependencies {
    runtime 'team.chisel.ctm:CTM:MC1.12.2-1.0.2.31'
    compile 'curse.maven:hwyla-253449:2568751' // 1.8.26-B41_1.12.2
    deobfProvided 'mezz.jei:jei_1.12.2:4.16.1.302:api'
    runtime 'mezz.jei:jei_1.12.2:4.16.1.302'
}

compileJava {
    options.with {
        it.fork = true
        it.deprecation = true
        it.encoding = 'UTF-8'
        it.compilerArgs.addAll(['-Xlint:all', '-parameters'])
    }
}

processResources {
    filesMatching('/mcmod.info') {
        expand 'version': project.version
    }
}

jar {
    from sourceSets.api.output
    from sourceSets.main.output
}

task apiJar(type: Jar) {
    from sourceSets.api.allSource
    from sourceSets.api.output
    classifier = 'api'
}

reobf {
    apiJar {
        mappingType = 'SEARGE'
    }
}

assemble {
    dependsOn apiJar, reobfApiJar
}

tasks.eclipse {
    dependsOn installLombok
}

if (project.hasProperty('curseforge_key')) {
    curseforge {
        if (project.hasProperty('curseforge_key')) {
            apiKey = project.curseforge_key
        }

        project {
            id = '291502'
            changelog = System.getenv('CHANGELOG')
            if (changelog == null || changelog == 'none') {
                changelog = parseChangelog()
            }
            changelogType = 'html'
            releaseType = 'beta'
            addGameVersion '1.12.2'
            mainArtifact(jar) {
                displayName = "${getModField('NAME', mod_file)} - $version"
            }
            relations {
                requiredDependency 'ctm'
            }
        }
    }
}

String parseChangelog() {
    def changelogFile = file('changelog.txt')
    String changelogText = ''
    int lineCount = 0
    boolean done = false
    changelogFile.eachLine {
        if (done || it == null) {
            return
        }
        if (it.size() > 1) {
            def temp = it
            if (lineCount == 0) {
                temp = "${getModField('NAME', mod_file)} $version"
                temp = "<h2>$temp</h2>"
            } else if (it.startsWith('-')) {
                temp = "&nbsp;&nbsp;&nbsp;$temp"
                temp = temp.replaceAll('(\\S+\\/\\S+)#([0-9]+)\\b', '<a href="https://github.com/$1/issues/$2">$0</a>')
                temp = temp.replaceAll('#([0-9]+)\\b(?!</a>)', '<a href="https://github.com/PracticalSpaceFireworks/PracticalSpaceFireworks/issues/$1">$0</a>')
            } else {
                temp = "<h4>$temp</h4>"
            }
            changelogText += "$temp<br/>"
            lineCount++
            return
        } else {
            done = true
        }
    }
    return changelogText
}

String getModFile() {
    String path = ""
    FileTree tree = fileTree(dir: 'src/main/java')
    tree.include '**/*.java'
    tree.visit { element ->
        if (element.file.isFile()) {
            element.file.eachLine { String line ->
                line = line.trim()
                if (line.matches("@Mod\\s*[(].*")) {
                    path = "src/main/java/$element.relativePath"
                }
            }
        }
    }
    return path
}

String getModField(String type, String modFile) {
    if (modFile.length() == 0) {
        return ''
    }
    String field = ''
    String prefix = "public static final String $type = \""
    File file = file(modFile)
    file.eachLine { String line ->
        line = line.trim()
        if (line.startsWith(prefix)) {
            line = line.substring(prefix.length(), line.length() - 2)
            field = line
        }
    }
    return field
}
